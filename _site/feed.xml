<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hu's Space !</title>
    <description>This is personnel website of HuTianyun</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 20 Sep 2018 14:16:52 +0800</pubDate>
    <lastBuildDate>Thu, 20 Sep 2018 14:16:52 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title> ABAQUS 水管受爆炸冲击 </title>
        <description>&lt;p&gt;&lt;strong&gt;仅供参考交流，对计算结果的精确性不负任何责任&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;abaqus-模拟杆水管受到爆炸冲击&quot;&gt;ABAQUS 模拟杆水管受到爆炸冲击&lt;/h1&gt;
&lt;p&gt;【结果】水管受冲击后，水从开口出射出，水管压扁，基座部分破坏；因为水管存在和水的射出，带走了部分能力，能过减弱基座受到了的应力。
&lt;img src=&quot;/post_img/Airblast/res.gif&quot; alt=&quot;Airblast&quot; title=&quot;Airblastl&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step1-材料定义装配&quot;&gt;step1 材料定义，装配&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;水管装配时全部没入欧拉体中，基座底部固支，水管与基座fixed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/Airblast/material.png&quot; data-canonical-src=&quot;/post_img/Airblast/material.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step2--接触定义&quot;&gt;step2  接触定义&lt;/h2&gt;
&lt;h3 id=&quot;直接定义全体的通用接触具体作用有待考察&quot;&gt;直接定义全体的通用接触（具体作用有待考察）&lt;/h3&gt;
&lt;h3 id=&quot;水管的自接触&quot;&gt;水管的自接触&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;水管材料使用的橡胶，在受airblast时受压上下内表面可能会接触&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/Airblast/self-contact.png&quot; width=&quot;300&quot; heigth=&quot;300&quot; data-canonical-src=&quot;/post_img/Airblast/self-contact.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;定义airblast&quot;&gt;定义Airblast&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;abaqus 中使用TNT 来定义，指定爆炸点和接触面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/Airblast/air-blast.png&quot; width=&quot;400&quot; heigth=&quot;400&quot; data-canonical-src=&quot;/post_img/Airblast/air-blast.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step3-离散出水划分网格&quot;&gt;step3 离散出水，划分网格&lt;/h2&gt;
&lt;h3 id=&quot;划分disfield&quot;&gt;划分DisField&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/post_img/Airblast/water-dis.png&quot; width=&quot;400&quot; heigth=&quot;400&quot; data-canonical-src=&quot;/post_img/Airblast/water-dis.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mesh&quot;&gt;mesh&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Total number of nodes: 98289
Total number of elements: 86618
     6618 linear hexahedral elements of type C3D8R
     80000 linear hexahedral elements of type EC3D8R&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 19 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/abaqus/2018/09/19/airblast-watertube.html</link>
        <guid isPermaLink="true">http://localhost:4000/abaqus/2018/09/19/airblast-watertube.html</guid>
        
        
        <category>ABAQUS</category>
        
      </item>
    
      <item>
        <title> ABAQUS 模拟杆中水的运动 </title>
        <description>&lt;p&gt;&lt;strong&gt;仅供参考交流，对计算结果的精确性不负任何责任&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;abaqus-模拟杆中水的运动--简要的步骤介绍和笔记&quot;&gt;ABAQUS 模拟杆中水的运动  简要的步骤介绍和笔记&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/half-water-imapct/half-water-imapct.gif&quot; alt=&quot;half water imapct&quot; title=&quot;half water imapct&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step1-create-the-eulerian-part&quot;&gt;step1 Create the eulerian part&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;use the bigger eulerian part to cover the water inside.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/half-water-imapct/f4.png&quot; data-canonical-src=&quot;/post_img/half-water-imapct/f4.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step2-define-the-material&quot;&gt;step2 Define the material&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;define the material of eulerian part&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;do-not-give-half-water-material&quot;&gt;DO NOT give half-water material&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t worry about the warning about without material when submitting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/half-water-imapct/f4.png&quot; data-canonical-src=&quot;/post_img/half-water-imapct/f1.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step3-create-the-discrete-field&quot;&gt;step3 Create the discrete Field&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Choose the bigger eulerian part the then the half-water to define the discrete Field&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/half-water-imapct/f4.png&quot; data-canonical-src=&quot;/post_img/half-water-imapct/f2.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step4-define-the-general-contact&quot;&gt;step4 Define the general contact&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Just define it, without the detail property&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/half-water-imapct/f4.png&quot; data-canonical-src=&quot;/post_img/half-water-imapct/f5.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step5-define-the-load&quot;&gt;step5 Define the Load&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Define the predefined field and choose the discrete field created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/half-water-imapct/f4.png&quot; data-canonical-src=&quot;/post_img/half-water-imapct/f3.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;result-discussion-and-future-improve&quot;&gt;Result discussion and future improve&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Compare the result with the bar without water inside, we can see the bar’s movement direction changes backward and forward due to the inertia of water movement.&lt;/li&gt;
  &lt;li&gt;The stress wave propagation is also quite different.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 06 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/abaqus/2018/07/06/impact-water-in-bar.html</link>
        <guid isPermaLink="true">http://localhost:4000/abaqus/2018/07/06/impact-water-in-bar.html</guid>
        
        
        <category>ABAQUS</category>
        
      </item>
    
      <item>
        <title> ABAQUS 复合材料层合板壳单元拉伸 </title>
        <description>&lt;p&gt;&lt;strong&gt;仅供参考交流，对计算结果的精确性不负任何责任&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;abaqus-层合板壳单元拉伸&quot;&gt;ABAQUS 层合板壳单元拉伸&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/composite-shell/shell-tensile.gif&quot; alt=&quot;composite shell&quot; title=&quot;composite shell&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step1-正常的3d实体拉伸&quot;&gt;step1 正常的3D实体拉伸&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;(有的也可以采用shell，没有厚度)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step2--网格划分&quot;&gt;step2  网格划分&lt;/h2&gt;
&lt;h3 id=&quot;连续壳单元扫掠划分&quot;&gt;连续壳单元，扫掠划分&lt;/h3&gt;
&lt;p&gt;如果选用 结构网络,3D stress 则会报错，不能计算&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Error in job com-1: 1050 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;分割实体&quot;&gt;分割实体&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;如果想要更精细划分并在不同部位选择不同材料，则需要分割实体．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step3--材料定义&quot;&gt;step3  材料定义&lt;/h2&gt;
&lt;h3 id=&quot;弹性模量定义&quot;&gt;弹性模量定义&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;选用__lamina__，定义__Hashin__破坏准则，损伤演化．&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/composite-shell/lamina.png&quot; data-canonical-src=&quot;/post_img/composite-shell/lamina.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/composite-shell/material.png&quot; data-canonical-src=&quot;/post_img/composite-shell/material.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;定义层合板坐标轴&quot;&gt;定义层合板坐标轴&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/post_img/composite-shell/sys.png&quot; data-canonical-src=&quot;/post_img/composite-shell/sys.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;定义层合板选择坐标轴输入角度&quot;&gt;定义层合板，选择坐标轴，输入角度&lt;/h3&gt;

&lt;h2 id=&quot;step4-分析步输出定义&quot;&gt;step4 分析步，输出定义&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;采用了显示动态分析步，时间0.001s&lt;/li&gt;
  &lt;li&gt;增加输出步长，输出失效变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/composite-shell/step-mesh.png&quot; data-canonical-src=&quot;/post_img/composite-shell/step-mesh.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step5-载荷定义&quot;&gt;step5 载荷定义&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;位移加载&lt;/li&gt;
  &lt;li&gt;smooth step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/composite-shell/load.png&quot; data-canonical-src=&quot;/post_img/composite-shell/load.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/abaqus/2018/06/02/composite-shell.html</link>
        <guid isPermaLink="true">http://localhost:4000/abaqus/2018/06/02/composite-shell.html</guid>
        
        
        <category>ABAQUS</category>
        
      </item>
    
      <item>
        <title> Python 字符串作为函数名调用 </title>
        <description>&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3061/calling-a-function-of-a-module-by-using-its-name-a-string&quot;&gt;[str-&amp;gt;fun-name]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/python/python-func-globals.html&quot;&gt;[python-func-globals]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/python/python-func-getattr.html&quot;&gt;[python-func-getattr]&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;用法&quot;&gt;用法&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class A:
    def __init__(self):
        pass

    def sampleFunc(self, arg):
        print('you called sampleFunc({})'.format(arg))

m = globals()['A']()
func = getattr(m, 'sampleFunc')
func('sample arg')

# Sample, all on one line
getattr(globals()['A'](), 'sampleFunc')('sample arg')
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;解释&quot;&gt;解释&lt;/h3&gt;
&lt;p&gt;####Python globals() 函数
globals() 函数会以字典类型返回当前位置的全部全局变量。&lt;/p&gt;
&lt;h5 id=&quot;实例&quot;&gt;实例&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt;a='runoob'
&amp;gt;&amp;gt;&amp;gt; print(globals()) # globals 函数返回一个全局变量的字典，包括所有导入的变量。
{'__builtins__': &amp;lt;module '__builtin__' (built-in)&amp;gt;, '__name__': '__main__', '__doc__': None, 'a': 'runoob', '__package__': None}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;python-getattr-函数&quot;&gt;Python getattr() 函数&lt;/h4&gt;
&lt;p&gt;getattr() 函数用于返回一个对象属性值。&lt;/p&gt;
&lt;h5 id=&quot;实例-1&quot;&gt;实例&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt;class A(object):
...     bar = 1
... 
&amp;gt;&amp;gt;&amp;gt; a = A()
&amp;gt;&amp;gt;&amp;gt; getattr(a, 'bar')        # 获取属性 bar 值
1
&amp;gt;&amp;gt;&amp;gt; getattr(a, 'bar2')       # 属性 bar2 不存在，触发异常
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: 'A' object has no attribute 'bar2'
&amp;gt;&amp;gt;&amp;gt; getattr(a, 'bar2', 3)    # 属性 bar2 不存在，但设置了默认值
3
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/python/2018/06/01/py-strAs-fun-name.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/2018/06/01/py-strAs-fun-name.html</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title> 复合材料层合板计算 </title>
        <description>&lt;h1 id=&quot;introduction-复合材料层合板在一定载荷下的应力应变分布的计算选用强度准则校测层合板失效给出失效历史&quot;&gt;Introduction 　复合材料层合板在一定载荷下的应力应变分布的计算，选用强度准则校测层合板失效，给出失效历史．&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;CN&lt;/th&gt;
      &lt;th&gt;ENG&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;复合材料层合板计算&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/Eacaen/CLT-material-properties&quot; title=&quot;CLT&quot;&gt;Composite Material Calculation with CLT&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;#composite-material-calculation-with-clt&quot;&gt;Introduction&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;read the program introduction for more details &lt;/code&gt; &lt;a href=&quot;/doc/pro_introduction.pdf&quot;&gt;Here&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#running-requirements&quot;&gt;Running requirements&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;#license&quot;&gt;License&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img align=&quot;right&quot; width=&quot;400&quot; height=&quot;300&quot; src=&quot;/post_img/CLT-fig/Composite_3d.png&quot; data-canonical-src=&quot;/post_img/CLT-fig/Composite_3d.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h5 id=&quot;project-code-for-mechanics-of-composite-structure-in-npupartly-finish&quot;&gt;Project code for Mechanics of Composite Structure IN NPU,PARTLY FINISH.&lt;/h5&gt;
&lt;h5 id=&quot;all-right-reserved&quot;&gt;ALL RIGHT RESERVED&lt;/h5&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;see-the-blade-design-used-the-composite-materials&quot;&gt;see the blade design used the composite materials&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;composite-blade-design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://eacaen.github.io/python/2017/10/17/composite-blade-design.html&quot;&gt;Blog Introduction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Eacaen/composite-blade-design&quot;&gt;Github source&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;project-goals&quot;&gt;Project goals:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use the fibre and matrix or given data to define the composite lamina and then layup the laminate.&lt;/li&gt;
  &lt;li&gt;Use the &lt;em&gt;Classical Lamination Theory&lt;/em&gt; to  calculate the stress&amp;amp;strain distribution in each layer.&lt;/li&gt;
  &lt;li&gt;Choose suitable &lt;em&gt;Failure Criteria&lt;/em&gt; to check the strength of laminate at given load.&lt;/li&gt;
  &lt;li&gt;Show accurate calculate information of results, display /post_img/CLT-figures of  stress&amp;amp;strain distribution; show the failure steps of chosen layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-flow-of-the-project&quot;&gt;Data flow of the Project&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/post_img/CLT-fig/dataflow.png&quot; data-canonical-src=&quot;/post_img/CLT-fig/dataflow.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;task-achieved&quot;&gt;Task achieved:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;[x] Use CLT to calculate  stresses and strains distribution in lamina &amp;amp; laminate in local and global coordinate systems&lt;/li&gt;
  &lt;li&gt;[x] Elastic modulus  calculate  for  lamina with [mixture of law , VDI2014 , Chamis model …..]&lt;/li&gt;
  &lt;li&gt;[x] Global elastic modulus  calculate  for  &lt;strong&gt;laminate&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;[x] Failure criteria [Tsai-Wu, Tsai-Hill, Hoffman, Max stress&amp;amp;strain …]&lt;/li&gt;
  &lt;li&gt;[x] Display the /post_img/CLT-figures and report accurate results&lt;/li&gt;
  &lt;li&gt;[x] Puck failure criteria&lt;/li&gt;
  &lt;li&gt;[ ] Thermal &amp;amp; moisture effects on CLT calculations&lt;/li&gt;
  &lt;li&gt;[ ] Database for Fibre and Matrix, laminate materials&lt;/li&gt;
  &lt;li&gt;[ ] …&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;brief-intro&quot;&gt;Brief intro&lt;/h2&gt;
&lt;h3 id=&quot;coordinate-system&quot;&gt;Coordinate System&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;xy is the Global System for &lt;strong&gt;laminate&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;12 is the Local system for &lt;strong&gt;lamina&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/CLT-fig/laminate_COS.png&quot; data-canonical-src=&quot;/post_img/CLT-fig/laminate_COS.png&quot; /&gt;&lt;img src=&quot;/post_img/CLT-fig/lammmm.png&quot; data-canonical-src=&quot;png/lammmm.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;composite-material-calculation-with-clt&quot;&gt;Composite Material Calculation with CLT&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The main package is a Python composite materials calculation package.
The calculation of laminate stress, strain and failure Criterion based on the Classical Lamination Theory (&lt;a href=&quot;https://en.wikipedia.org/wiki/Composite_laminates&quot;&gt;CLT&lt;/a&gt;).&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;You can define the lamina’s fibre and matrix’s parameters like the Elastic moduli
  &lt;img src=&quot;http://latex.codecogs.com/gif.latex?E_{1},E_{2}&quot; alt=&quot;&quot; /&gt;,
   Shear moduli &lt;img src=&quot;http://latex.codecogs.com/gif.latex?G&quot; alt=&quot;&quot; /&gt; and strength, then  in the next step, you can define lamina’s layer angle and thickness directly or combined by fibre/matrix.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Use the &lt;strong&gt;&lt;em&gt;Laminate class&lt;/em&gt;&lt;/strong&gt; to get the matrix such as &lt;img src=&quot;http://latex.codecogs.com/gif.latex?A,B,D,Q,\\bar{Q}&quot; alt=&quot;A,B,D,Q&quot; /&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Use the &lt;strong&gt;&lt;em&gt;Load class&lt;/em&gt;&lt;/strong&gt; and load force and moment to the laminate to calculate the stress &lt;img src=&quot;http://latex.codecogs.com/gif.latex?\\sigma&quot; alt=&quot;&quot; /&gt; and stain &lt;img src=&quot;http://latex.codecogs.com/gif.latex?\\epsilon&quot; alt=&quot;&quot; /&gt; of each lamina.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Use the &lt;strong&gt;&lt;em&gt;Failure_Cirterion class&lt;/em&gt;&lt;/strong&gt; and you can choose different theories to check witch lamina failure or not.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;em&gt;laminate_Tools.py&lt;/em&gt; can help to plot the stress and strain distribution in the laminate in the COS(xy or 12), print the results in &lt;em&gt;Excel&lt;/em&gt; formate  and save it in &lt;em&gt;Excel&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;400&quot; height=&quot;300&quot; src=&quot;/post_img/CLT-fig/strain_dis1.png&quot; data-canonical-src=&quot;/post_img/CLT-fig/strain_dis1.png&quot; /&gt;&lt;img width=&quot;400&quot; height=&quot;300&quot; src=&quot;/post_img/CLT-fig/stress_dis.png&quot; data-canonical-src=&quot;/post_img/CLT-fig/stress_dis.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;400&quot; height=&quot;300&quot; src=&quot;/post_img/CLT-fig/strain_dis.png&quot; data-canonical-src=&quot;/post_img/CLT-fig/strain_dis.png&quot; /&gt;&lt;img width=&quot;400&quot; height=&quot;300&quot; src=&quot;/post_img/CLT-fig/result.png&quot; data-canonical-src=&quot;/post_img/CLT-fig/result.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-failure-analysis&quot;&gt;Run failure analysis&lt;/h2&gt;
&lt;p&gt;Run  failure analysis by adding load step by step , use &lt;em&gt;laminate_step_failure.py&lt;/em&gt; can  plot the Load Factor vs  the strain development of the chosen laminate, at the same time, it can mark the First Ply Failure and Last Ply Failure.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It may take some more time to run the process&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img width=&quot;400&quot; height=&quot;300&quot; src=&quot;/post_img/CLT-fig/failstep.png&quot; data-canonical-src=&quot;/post_img/CLT-fig/failstep.png&quot; /&gt;&lt;img width=&quot;400&quot; height=&quot;300&quot; src=&quot;/post_img/CLT-fig/failureStep.png&quot; data-canonical-src=&quot;/post_img/CLT-fig/failureStep.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;running-requirements&quot;&gt;Running requirements&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Python &amp;gt; v2.7
Numpy
Scipy
Sympy
matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Copy the source files in the local directory and add the PATH in the system or copy the files to the Python’s “site-packages” folder.&lt;br /&gt;
Copy the source file in you own file and develop the new function by yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;license&quot;&gt;License&lt;/h3&gt;
&lt;h4 id=&quot;project-code-for-mechanics-of-composite-structure-in-npupartly-finish-1&quot;&gt;Project code for Mechanics of Composite Structure IN NPU,PARTLY FINISH.&lt;/h4&gt;
&lt;h4 id=&quot;all-right-reserve&quot;&gt;ALL RIGHT RESERVE&lt;/h4&gt;
&lt;hr /&gt;

</description>
        <pubDate>Sun, 20 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/python/2018/05/20/CLT-calculation.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/2018/05/20/CLT-calculation.html</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title> ABAQUS 运动相机防水壳密封页片 </title>
        <description>&lt;p&gt;&lt;strong&gt;仅供参考交流，对计算结果的精确性不负任何责任&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;abaqus运动相机防水壳密封页片&quot;&gt;ABAQUS　运动相机防水壳密封页片&lt;/h1&gt;

&lt;p&gt;淘宝上买了运动相机防水壳，用过的都知道运动相机防水壳采用是确实一种十分暴力的方法，借助页片变形的力直接将密封圈固定在壳体上，但是这样的方法完全依赖页片变形，我在淘宝上先后购买了两款不同页片形状的壳子，第一款壳子的页片已连续损坏两次，都是由于在开闭壳子时圆形边角开裂而造成应力集中，而购买的第二款新壳子就直接去掉了原有的边角，并将密封圈在密封时嵌入壳体．就这个改进我感到还是满意的，改进原因也十分简单．借机复习一下ＡＢＡＱＵＳ使用，看看到底改进了多少．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/ABAQUS-WPBlade/crack.jpg&quot; alt=&quot;two-cc&quot; title=&quot;two&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;简化模型和材料参数&quot;&gt;简化模型和材料参数&lt;/h2&gt;
&lt;p&gt;原始曲面模型比较复杂，塑料材料也不好确定，但是我只是要看到大概的趋势，所以对模型进行了简化，材料也只给定了弹性模量和泊松比．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/ABAQUS-WPBlade/simple-model1.png&quot; alt=&quot;simple-model&quot; title=&quot;simple-model1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;简化受力和边界条件&quot;&gt;简化受力和边界条件&lt;/h2&gt;
&lt;p&gt;固定限制页片底部Ｙ方向和边界处Ｘ方向的位移，给定页片爪子处强制的位移．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/ABAQUS-WPBlade/simple-model2.png&quot; alt=&quot;simple-model&quot; title=&quot;simple-model2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结果分析&quot;&gt;结果分析&lt;/h2&gt;

&lt;h3 id=&quot;款式一-完整页片&quot;&gt;[款式一] 完整页片&lt;/h3&gt;
&lt;p&gt;在完整的款式一页片处，应力集中于圆孔两侧，最大位移位于爪子处．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/ABAQUS-WPBlade/0/wholes1.png&quot; alt=&quot;wholes1&quot; title=&quot;wholes1&quot; /&gt;
&lt;img src=&quot;/post_img/ABAQUS-WPBlade/0/wholeu1.png&quot; alt=&quot;wholeu1&quot; title=&quot;wholeu1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;款式一-裂纹页片&quot;&gt;[款式一] 裂纹页片&lt;/h3&gt;
&lt;h4 id=&quot;裂纹&quot;&gt;裂纹&lt;/h4&gt;

&lt;p&gt;裂纹直接画图产生，没有使用ＡＢＡＱＵＳ裂纹功能．（不会）
&lt;img src=&quot;/post_img/ABAQUS-WPBlade/1/hole.png&quot; alt=&quot;hole&quot; title=&quot;hole&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;结果&quot;&gt;结果&lt;/h4&gt;
&lt;p&gt;在款式一发生裂纹的页片处，应力集中于圆孔裂纹对面，应力值稍有下降，整体位移感觉没有巨大改变．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/ABAQUS-WPBlade/1/holes.png&quot; alt=&quot;holes&quot; title=&quot;holes&quot; /&gt;
&lt;img src=&quot;/post_img/ABAQUS-WPBlade/1/holeu.png&quot; alt=&quot;holeu&quot; title=&quot;holeu&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;款式二-去角页片&quot;&gt;[款式二] 去角页片&lt;/h3&gt;
&lt;p&gt;在款式二页片，直接将圆口去掉，消除了孔边应力集中，整体位移感觉没有什么改变．&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/ABAQUS-WPBlade/2/wholes2.png&amp;quot;wholes2&amp;quot;&quot; alt=&quot;wholes2&quot; /&gt;
&lt;img src=&quot;/post_img/ABAQUS-WPBlade/2/wholeu2.png&quot; alt=&quot;wholeu2&quot; title=&quot;wholeu2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结论分析&quot;&gt;结论分析&lt;/h2&gt;
&lt;p&gt;对比以上三个结果，看到款式一设计上个人还是感觉存在一些不足，尤其是在页片塑料选材和制造上如果不行的话，由于应力集中和拆装时容易侧重一边，确实容易像我一样多次掰断页片．&lt;/p&gt;

&lt;p&gt;第二款页片，在节省了材料的同时，消除了应力集中．整体的位移没有什么变化，应该不会影响密封性能．（关于最终载荷和位移对密封的影响分析是否正确还有待考察）．&lt;/p&gt;

&lt;h2 id=&quot;ＥＮＤ&quot;&gt;ＥＮＤ&lt;/h2&gt;
&lt;p&gt;款式二刚到货，防水性能还有待测试．但是就目前来看，款式二的改进确实比款式一好多了．&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/abaqus/2018/04/25/three-blades-abaqus.html</link>
        <guid isPermaLink="true">http://localhost:4000/abaqus/2018/04/25/three-blades-abaqus.html</guid>
        
        
        <category>ABAQUS</category>
        
      </item>
    
      <item>
        <title>开挂玩微信跳一跳</title>
        <description>&lt;h1 id=&quot;开挂玩微信跳一跳&quot;&gt;开挂玩微信跳一跳&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Eacaen/wechat_jump_game&quot;&gt;程序地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av18307956&quot;&gt;B站视频–&amp;gt;酸爽。跳一跳20倍播放从4000分到20000＋&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=18307956&amp;amp;cid=29885527&amp;amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;换了小米mix2后发现安卓真是各种权限开放。网上也有各种微信跳一跳的自动挂，尝试一下做个记录。&lt;/p&gt;

&lt;h2 id=&quot;获取安卓usb调试权限&quot;&gt;获取安卓USB调试权限&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ubuntu 安装abd tool 调试安卓，需要有java8，如果和已有的java７冲突，可参考网上教程，教程亲测可用。&lt;/li&gt;
  &lt;li&gt;小米打开开发者模式，开启USB调试，开启允许模拟触屏。&lt;/li&gt;
  &lt;li&gt;shell 中打开adb device 可以发现设备，如果发现不了，网上教程亲测可用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;手动模式&quot;&gt;手动模式&lt;/h2&gt;
&lt;p&gt;文件中手动模式，使用matplotlib库，将屏幕截图作为动画的部分，鼠标选择起跳和结束位置，乘上起跳系数后使用adb发送按压时间完成跳跃．&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;速度慢，依赖鼠标点击精度。&lt;/li&gt;
  &lt;li&gt;方法很好，直观且可以学习很多新的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;自动模式&quot;&gt;自动模式&lt;/h2&gt;
&lt;h3 id=&quot;使用opencv&quot;&gt;使用OpenCV&lt;/h3&gt;
&lt;p&gt;进行图像处理，截图中心部分。高斯去噪后找到图像边缘，继而找出小人的中心和下一个跳板的中心。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;每次跳到中心后，会在下个位子中心显示白点，可以直接寻找，更加方便&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;使用tensorflow&quot;&gt;使用Tensorflow&lt;/h3&gt;
&lt;p&gt;使用了800–1000张图片,截取中心部分，灰度显示，利用卷积神经网络，使用 &lt;em&gt;使用OpenCV&lt;/em&gt; 找到的中心作为输入，按压时间作为训练结果。训练效果有些许，但是不好&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;学艺不精，参数调试，层数选择有待学习&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;debug&quot;&gt;DEBUG&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;对于不是正方形的跳板，目前只能放弃，但是不影响&lt;/li&gt;
  &lt;li&gt;深度学习并没有学习到我想象中效果，渣渣电脑和渣渣技术&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;又要多多学习一个了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/wangshub/wechat_jump_game&quot;&gt;参考github@wangshub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 08 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/python/2018/01/08/wechat_jump_game.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/2018/01/08/wechat_jump_game.html</guid>
        
        
        <category>Python</category>
        
      </item>
    
      <item>
        <title>Ubuntu 14.04 install caffe</title>
        <description>&lt;h1 id=&quot;ubuntu-安装-caffe&quot;&gt;Ubuntu 安装 caffe&lt;/h1&gt;
&lt;p&gt;安装参考&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/u011762313/article/details/47262549&quot;&gt;Ubuntu14.04 安装Caffe（仅CPU）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/fairylrt/article/details/43560525&quot;&gt;Anaconda装OpenCV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/wuzuyu365/article/details/52431062&quot;&gt;python caffe报错：No module named google.protobuf.internal&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 18 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/ubuntu/2017/12/18/install-caffe-opencv.html</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/2017/12/18/install-caffe-opencv.html</guid>
        
        
        <category>Ubuntu</category>
        
      </item>
    
      <item>
        <title>BBB Notebook 6 IIC使用</title>
        <description>&lt;h1 id=&quot;beagleboard-black-笔记-6&quot;&gt;beagleboard black 笔记 &amp;lt;6&amp;gt;&lt;/h1&gt;
&lt;p&gt;我使用的是之前做小四轴剩下的 MPU6050 ，它和 HMC5883 焊在一起的，因为IIC 使用的是总线形式，所以不影响，反而可以测试一下多个传感器下的 IIC 功能。我先使用IIC读取 MPU6050 数据。&lt;/p&gt;

&lt;h1 id=&quot;开始使用-iic&quot;&gt;开始使用 IIC&lt;/h1&gt;

&lt;h2 id=&quot;开启-iic-传输&quot;&gt;开启 IIC 传输&lt;/h2&gt;
&lt;p&gt;与串口操作类似，添加覆盖层，【改变 IO 口属性】&lt;/p&gt;

&lt;h3 id=&quot;操作步骤&quot;&gt;操作步骤&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;root@beaglebone:/lib/firmware# echo BB-I2C1 &amp;gt; $SLOTS  &amp;amp;
[1] 1585

root@beaglebone:/lib/firmware# cd /sys/devices/platform/ocp/
root@beaglebone:/sys/devices/platform/ocp# config-pin -l P9.17
default gpio gpio_pu gpio_pd spi_cs i2c pwm pru_uart

root@beaglebone:/sys/devices/platform/ocp# cat ocp:P9_17_pinmux/state
default
root@beaglebone:/sys/devices/platform/ocp# config-pin P9.17 i2c
root@beaglebone:/sys/devices/platform/ocp# config-pin P9.18 i2c

root@beaglebone:/sys/devices/platform/ocp# cat ocp:P9_17_pinmux/state
i2c
root@beaglebone:/sys/devices/platform/ocp# cat ocp:P9_18_pinmux/state
i2c
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;使用-linux-i2c-工具测试-iic-连接&quot;&gt;使用 Linux I2C 工具，测试 IIC 连接&lt;/h2&gt;
&lt;h3 id=&quot;检测总线上连接设备的地址&quot;&gt;检测总线上连接设备的地址&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;i2cdetect -y -r 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/BBB-img/iic-findID.png&quot; alt=&quot;iic-findID&quot; title=&quot;iic-findID&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;检测mpu6050-地址&quot;&gt;检测MPU6050 地址&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;i2cget -y 1 0x68 0x75
0x68
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;设置mpu6050-电源管理值&quot;&gt;设置MPU6050 电源管理值&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;i2cset -y 1 0x68 0x6B 0x00　//电源管理，典型值：0x00(正常启用)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;读取mpu6050-数据&quot;&gt;读取MPU6050 数据&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/post_img/BBB-img/mpu-origindata.png&quot; alt=&quot;mpu-origindata&quot; title=&quot;mpu-origindata&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;c重新获取mpu6050欧拉角&quot;&gt;C++重新获取mpu6050欧拉角&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Eacaen/my-BBB-lib/tree/master/i2c-mpu6050&quot;&gt;获取mpu6050欧拉角&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;iic类-读取地址&quot;&gt;IIC类 读取地址&lt;/h2&gt;

&lt;h2 id=&quot;mpu6050类-读取寄存器值&quot;&gt;mpu6050类 读取寄存器值&lt;/h2&gt;

&lt;h2 id=&quot;使用四元数进行姿态解析&quot;&gt;使用四元数进行姿态解析&lt;/h2&gt;

&lt;p&gt;尚未加入诸如卡尔曼等类型的滤波函数。&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;linux-硬件驱动编程&quot;&gt;Linux 硬件驱动编程&lt;/h2&gt;

&lt;p&gt;使用i2c通信先配置地址，数据位，超时时间等等通信规则。
这里的ioctl函数就是用来配置这些参数的。
I2C_SLAVE：安全的配置，如果i2c已经配置过会返回失败。
 I2C_SLAVE_FORCE：总是成功，不管其他人有没有在使用，确定只有你使用这个i2c的时候使用。
同时ioctl还能使用I2C_TENBIT，I2C_PEC，I2C_TIMEOUT等参数。
这里只是配置i2c通信规则，还没有发送数据。
配置完成后，调用write,read函数可以接收发送数据。&lt;/p&gt;

&lt;p&gt;i2cget和i2cset，分别是对寄存器进行获取和写入。用法为i2cget -y 总线号 设备地址 寄存器地址 模式和i2cset -y 总线号 设备地址 寄存器地址 数值 模式。模式默认为b（byte）即读取8bit数据，i2cget可用模式有b/w/c，i2cset可用模式有b/w/c/i/s，其中w为word（16bit），i和s分别为I2C和SMBUS的block数据。&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/beagleboard-black/2017/11/29/BBB-note5-i2c1.html</link>
        <guid isPermaLink="true">http://localhost:4000/beagleboard-black/2017/11/29/BBB-note5-i2c1.html</guid>
        
        
        <category>beagleboard-black</category>
        
      </item>
    
      <item>
        <title>BBB Notebook ５ 串口使用</title>
        <description>&lt;h1 id=&quot;beagleboard-black-笔记-５&quot;&gt;beagleboard black 笔记 &amp;lt;５&amp;gt;&lt;/h1&gt;
&lt;p&gt;使用串口
&lt;a href=&quot;http://blog.csdn.net/wyt2013/article/details/16846027&quot;&gt;使用Beaglebone Black的串口UART&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pc-端&quot;&gt;PC 端&lt;/h2&gt;
&lt;h3 id=&quot;使用usb-转串口&quot;&gt;使用USB 转串口&lt;/h3&gt;
&lt;p&gt;插入USB 转串口，查看电脑是否有pl2303 驱动，查看电脑串口名字&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsmod |grep pl2303
dmesg | tail -f  
lsmod | grep usbserial
dmesg | grep ttyUSB0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;安装串口工具&quot;&gt;安装串口工具&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/gatieme/article/details/45310493&quot;&gt;Ubuntu安装配置串口通讯工具minicom&amp;amp;&amp;amp;cutecom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装minicom完成后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//回环测试
sudo minicom -b 9200 -o -D /dev/ttyUSB0 
sudo minicom -b 9200 -o -D /dev/ttyO0/1/2/4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果是键盘按下什么键，都会返回重复的【显示两次】。&lt;/p&gt;

&lt;h2 id=&quot;bbb开启串口&quot;&gt;BBB开启串口&lt;/h2&gt;
&lt;h3 id=&quot;进入目录查看串口的io口&quot;&gt;进入目录，查看串口的IO口&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;dtc -I dtb -O dts BB-UART1-00A0.dtbo &amp;gt; BB-UART1-00A0.dts
cat BB-UART1-00A0.dts //看到pin号
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;挂载device-tree来启动uart1&quot;&gt;挂载device tree来启动UART1&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;echo BB-UART1 &amp;gt; $SLOTS  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;改变波特率发送信息&quot;&gt;改变波特率，发送信息&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;stty -F /dev/ttyO1  9600
echo &quot;What a wonderful day&quot; &amp;gt; /dev/ttyO1  在配置完好的PC端就可以看到消息
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;注意改变io口的属性&quot;&gt;【注意】改变IO口的属性&lt;/h3&gt;
&lt;p&gt;一开始我以为，BBB的串口IO口属性是默认的，尝试了好多次都只能使用uart0，其他的都不行，后来想到这和pwm波的一样要配置属性。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/sys/devices/platform/ocp# config-pin -l P9.24
default gpio gpio_pu gpio_pd uart can i2c pru_uart pruin

/sys/devices/platform/ocp# config-pin -l P9.14　//与串口IO口不同
default gpio gpio_pu gpio_pd pwm

config-pin P9.24 uart
config-pin P9.26 uart　

cat ocp:P9_26_pinmux/state　//查看属性
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;uart0&quot;&gt;UART0&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;直接把串口转usb模块的TXD，RXD和地线连到对应的引脚上（如图所示），无需进行任何配置，立刻就能开始使用了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;uart0配置完波特率之后可以直接使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/post_img/BBB-img/pinuart0.jpeg&quot; alt=&quot;uart0&quot; title=&quot;uart0&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/beagleboard-black/2017/11/26/BBB-note5-uart1.html</link>
        <guid isPermaLink="true">http://localhost:4000/beagleboard-black/2017/11/26/BBB-note5-uart1.html</guid>
        
        
        <category>beagleboard-black</category>
        
      </item>
    
  </channel>
</rss>
